// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOGMESSAGE_MONOCLE_H_
#define FLATBUFFERS_GENERATED_LOGMESSAGE_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

#include "severity_generated.h"

namespace monocle {

struct LogMessage;

struct LogMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIME = 4,
    VT_SEVERITY = 6,
    VT_MESSAGE = 8
  };
  uint64_t time() const {
    return GetField<uint64_t>(VT_TIME, 0);
  }
  Severity severity() const {
    return static_cast<Severity>(GetField<int8_t>(VT_SEVERITY, 0));
  }
  const flatbuffers::String *message() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TIME) &&
           VerifyField<int8_t>(verifier, VT_SEVERITY) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct LogMessageBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_time(uint64_t time) {
    fbb_.AddElement<uint64_t>(LogMessage::VT_TIME, time, 0);
  }
  void add_severity(Severity severity) {
    fbb_.AddElement<int8_t>(LogMessage::VT_SEVERITY, static_cast<int8_t>(severity), 0);
  }
  void add_message(flatbuffers::Offset<flatbuffers::String> message) {
    fbb_.AddOffset(LogMessage::VT_MESSAGE, message);
  }
  explicit LogMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  LogMessageBuilder &operator=(const LogMessageBuilder &);
  flatbuffers::Offset<LogMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LogMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<LogMessage> CreateLogMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t time = 0,
    Severity severity = Severity::Trace,
    flatbuffers::Offset<flatbuffers::String> message = 0) {
  LogMessageBuilder builder_(_fbb);
  builder_.add_time(time);
  builder_.add_message(message);
  builder_.add_severity(severity);
  return builder_.Finish();
}

inline flatbuffers::Offset<LogMessage> CreateLogMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t time = 0,
    Severity severity = Severity::Trace,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return monocle::CreateLogMessage(
      _fbb,
      time,
      severity,
      message__);
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_LOGMESSAGE_MONOCLE_H_
