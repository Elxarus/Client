// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GETCHILDFOLDERSREQUEST_MONOCLE_H_
#define FLATBUFFERS_GENERATED_GETCHILDFOLDERSREQUEST_MONOCLE_H_

#include "flatbuffers/flatbuffers.h"

namespace monocle {

struct GetChildFoldersRequest;

struct GetChildFoldersRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PATH = 4
  };
  const flatbuffers::String *path() const {
    return GetPointer<const flatbuffers::String *>(VT_PATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.VerifyString(path()) &&
           verifier.EndTable();
  }
};

struct GetChildFoldersRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_path(flatbuffers::Offset<flatbuffers::String> path) {
    fbb_.AddOffset(GetChildFoldersRequest::VT_PATH, path);
  }
  explicit GetChildFoldersRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GetChildFoldersRequestBuilder &operator=(const GetChildFoldersRequestBuilder &);
  flatbuffers::Offset<GetChildFoldersRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GetChildFoldersRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<GetChildFoldersRequest> CreateGetChildFoldersRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> path = 0) {
  GetChildFoldersRequestBuilder builder_(_fbb);
  builder_.add_path(path);
  return builder_.Finish();
}

inline flatbuffers::Offset<GetChildFoldersRequest> CreateGetChildFoldersRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *path = nullptr) {
  auto path__ = path ? _fbb.CreateString(path) : 0;
  return monocle::CreateGetChildFoldersRequest(
      _fbb,
      path__);
}

}  // namespace monocle

#endif  // FLATBUFFERS_GENERATED_GETCHILDFOLDERSREQUEST_MONOCLE_H_
