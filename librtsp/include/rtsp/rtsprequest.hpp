// rtsprequest.hpp
//

#ifndef IDNOF8AZQ5VK0AVYAR5GVWDKC2NKS0TC62
#define IDNOF8AZQ5VK0AVYAR5GVWDKC2NKS0TC62

///// Includes /////

#include <boost/optional.hpp>
#include <vector>

#include "headers/authenticationtype.hpp"
#include "headers/contenttype.hpp"
#include "headers/parameters.hpp"
#include "headers/range.hpp"
#include "headers/requesttype.hpp"
#include "headers/transport.hpp"

///// Namespaces /////

namespace rtsp
{

///// Enumerations /////

enum KEEPALIVEMODE // The order of these match to (Add/Edit)OnvifDeviceWinow
{
  KEEPALIVEMODE_NONE = 0,
  KEEPALIVEMODE_GETPARAMETER,
  KEEPALIVEMODE_SETPARAMETER
};

///// Proto /////

KEEPALIVEMODE FromInt(int keepalivemode);

///// Classes /////

class RtspRequest
{
 public:

  RtspRequest();
  RtspRequest(const std::string& header);
  RtspRequest(headers::REQUESTTYPE requesttype, const std::string& url, uint64_t cseq, headers::CONTENTTYPE accepttype, const headers::Transport& transport, const std::string& session, const boost::optional<headers::Range>& range, const boost::optional<bool>& ratecontrol, const boost::optional<bool>& immediate, headers::CONTENTTYPE contenttype, const boost::optional<std::string::size_type>& contentlength, const std::vector<std::string>& getparameters, const headers::Parameters setparameters, KEEPALIVEMODE keepalivemode, const std::string& keepaliveurl);
  RtspRequest(headers::REQUESTTYPE requesttype, const std::string& url, uint64_t cseq, headers::CONTENTTYPE accepttype, const headers::Transport& transport, const std::string& session, const boost::optional<headers::Range>& range, const boost::optional<bool>& ratecontrol, const boost::optional<bool>& immediate, headers::CONTENTTYPE contenttype, const boost::optional<std::string::size_type>& contentlength, const std::vector<std::string>& getparameters, const headers::Parameters setparameters, KEEPALIVEMODE keepalivemode, const std::string& keepaliveurl, headers::AUTHENTICATIONTYPE authenticationtype, const std::string& authenticationuri, const std::string& username, const std::string& realm, const std::string& nonce);
  ~RtspRequest();

  void ParseContent(const std::string& content);

  bool IsValid() const;

  std::string ToString(const std::string& password) const; // Despite being const, this will modify response

  bool operator==(const RtspRequest& rhs) const;
  
  headers::REQUESTTYPE requesttype_;
  std::string url_;
  boost::optional<uint64_t> cseq_;
  headers::CONTENTTYPE accepttype_;
  headers::Transport transport_;
  std::string session_;
  bool requireonvifreplay_;
  boost::optional<headers::Range> range_;
  boost::optional<bool> ratecontrol_;
  boost::optional<bool> immediate_;
  headers::CONTENTTYPE contenttype_;
  boost::optional<std::string::size_type> contentlength_;

  std::vector<std::string> getparameters_;
  headers::Parameters setparameters_;

  KEEPALIVEMODE keepalivemode_;
  std::string keepaliveurl_;

  headers::AUTHENTICATIONTYPE authenticationtype_;
  std::string authenticationuri_;
  std::string username_;
  std::string realm_;
  std::string nonce_;
  mutable std::string response_; // This is mutable because it is generated by other members in ToString()

};

}

#endif
